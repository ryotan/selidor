<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>pw.itr0.selidor</groupId>
  <artifactId>selidor</artifactId>
  <version>${revision}</version>
  <packaging>pom</packaging>

  <name>${project.artifactId}</name>
  <description>Selidor: Root Aggregator</description>
  <url>${git.url}</url>

  <scm>
    <url>${git.url}</url>
    <connection>${git.connection}</connection>
    <developerConnection>${git.developerConnection}</developerConnection>
    <tag>${git.refname}</tag>
  </scm>

  <properties>
    <!--
         Selidor のバージョン。
         サブモジュールから親を指定する時もバージョンを `${revision}` と指定します。
    -->
    <revision>0.0.1-SNAPSHOT</revision>

    <!--
         SCMに関する設定。
         flatten-maven-pluginでexpandされたときに、mono-repoであることが考慮されずにURLなどの末尾にサブモジュール名が付いてしまうので、
         デプロイする対象になるそれぞれのpom.xmlで、 `project > url`,`project > scm` を指定する必要があります。
         その時に利用しやすいようにプロパティとして定義しています。
    -->
    <git.refname>master</git.refname>
    <git.url>https://github.com/team-kaba/selidor/tree/${git.refname}</git.url>
    <git.connection>scm:git:git@github.com:team-kaba/selidor.git</git.connection>
    <git.developerConnection>scm:git:git@github.com:team-kaba/selidor.git</git.developerConnection>

    <!--
         Root Aggregator のディレクトリを表すためのプロパティ。
         サブモジュールでは、このpom.xmlがあるディレクトリへの相対パスを `main.basedir` に設定します。
    -->
    <main.basedir>.</main.basedir>
    <!-- main.basedirの絶対パス -->
    <main.absdir>${project.basedir}/${main.basedir}</main.absdir>
    <!--
         静的解析などで利用するファイルを格納しているディレクトリへのパス（main.basedirからの相対パス）
         resources配下のディレクトリ名なので、パッケージ名の命名規約に合わせて`-`を取り除いています。
    -->
    <build-extensions.config.path>build-extensions/src/main/resources/selidor</build-extensions.config.path>

    <!-- Mavenの最小バージョン -->
    <maven.min-version>3.6.0</maven.min-version>

    <!-- Javaバージョン -->
    <java.version>11</java.version>
    <maven.compiler.release>${java.version}</maven.compiler.release>

    <!-- ファイルエンコーディング -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!--
         静的解析などを実行しないようにする設定。
         Maven実行時に `-Ddisable.checks` を設定することで、静的解析などをスキップできるようにしています。
    -->
    <disable.checks>false</disable.checks>
    <!-- NVD CVEのダウンロードに頻繁に失敗するため、エラーでもビルド失敗にならないようにしておく。 -->
    <fail-on-error.dependency-check>false</fail-on-error.dependency-check>

    <!--
         カバレッジを取得しないようにする設定。
         Maven実行時に `-Ddisable.coverage` を設定することで、カバレッジ取得をスキップできるようにしています。
    -->
    <disable.coverage>false</disable.coverage>

    <!-- Aggregator projectはdeployする必要がないので、skipしています。 -->
    <disable.deploy>true</disable.deploy>

    <!-- Mavenプラグインバージョン -->
    <!-- spring-boot-dependencies と同じバージョンを指定しているプラグイン -->
    <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
    <maven-enforcer-plugin.version>3.0.0</maven-enforcer-plugin.version>
    <maven-install-plugin.version>2.5.2</maven-install-plugin.version>
    <maven-javadoc-plugin.version>3.3.1</maven-javadoc-plugin.version>
    <maven-source-plugin.version>3.2.1</maven-source-plugin.version>
    <versions-maven-plugin.version>2.8.1</versions-maven-plugin.version>
    <xml-maven-plugin.version>1.0.2</xml-maven-plugin.version>

    <!-- spring-boot-dependencies にないプラグイン -->
    <dependency-check-maven.version>6.5.0</dependency-check-maven.version>
    <fmt-maven-plugin.version>2.12</fmt-maven-plugin.version>
    <maven-gpg-plugin.version>3.0.1</maven-gpg-plugin.version>
    <nexus-staging-maven-plugin.version>1.6.8</nexus-staging-maven-plugin.version>

    <!-- リリース時に署名に利用する鍵 -->
    <gpg.keyName/>
  </properties>

  <modules>
    <module>selidor-projects</module>
    <module>selidor-tests</module>
  </modules>

  <build>
    <!--
         ビルドに利用するプラグインの設定

         Root Aggregator のディレクトリで実行すれば良いプラグインや、すべての種類のMavenプロジェクトで実行するプラグインを定義しています。
    -->
    <pluginManagement>
      <plugins>
        <!-- インストール -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-install-plugin</artifactId>
          <version>${maven-install-plugin.version}</version>
        </plugin>

        <!-- 署名設定 -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-gpg-plugin</artifactId>
          <version>${maven-gpg-plugin.version}</version>
          <executions>
            <execution>
              <id>sign-artifacts</id>
              <phase>verify</phase>
              <goals>
                <goal>sign</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <keyname>${gpg.keyName}</keyname>
            <passphraseServerId>gpg.passphrase</passphraseServerId>
            <!-- Prevent gpg from using pinentry programs -->
            <gpgArguments>
              <arg>--pinentry-mode</arg>
              <arg>loopback</arg>
            </gpgArguments>
          </configuration>
        </plugin>

        <!-- javadoc.jar -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${maven-javadoc-plugin.version}</version>
          <executions>
            <execution>
              <goals>
                <!-- javadoc.jar を生成してデプロイするように設定します。 -->
                <goal>jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- sources.jar -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <executions>
            <execution>
              <goals>
                <!-- sources.jar を生成してデプロイするように設定します。 -->
                <goal>jar-no-fork</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- 依存ライブラリのCVE脆弱性チェック -->
        <plugin>
          <groupId>org.owasp</groupId>
          <artifactId>dependency-check-maven</artifactId>
          <version>${dependency-check-maven.version}</version>
          <configuration>
            <skip>${disable.checks}</skip>
            <failOnError>${fail-on-error.dependency-check}</failOnError>
            <!--
                 CVEに報告されているライブラリが検知されたら、ビルドを失敗するようにします。
                 依存ライブラリが脆弱な場合にちゃんと検知されるかどうかのテストには、
                   org.apache.struts:struts2-core:2.5.10
                 とかを使うと便利です。
            -->
            <failBuildOnAnyVulnerability>true</failBuildOnAnyVulnerability>
            <suppressionFiles>
              <!--
                   このプラグインでは、相対パスは ${project.basedir} からではなく実行時ディレクトリからの相対パスとして扱われるようです。
                   絶対パスを設定するほうが安全そうなので、 ${main.absdir} を使います。
              -->
              <suppressionFile>${main.absdir}/${build-extensions.config.path}/owasp/cve-suppressions.xml</suppressionFile>
            </suppressionFiles>
          </configuration>
          <!--
               サブモジュール分もまとめてチェックするので、サブモジュールでは実行しないようにしておきます。
          -->
          <inherited>false</inherited>
        </plugin>

        <!-- コードフォーマッタ -->
        <plugin>
          <!-- Root Aggregator で `mvn fmt:format` と実行できるように、ここでプラグインを定義しておきます。 -->
          <groupId>com.coveo</groupId>
          <artifactId>fmt-maven-plugin</artifactId>
          <version>${fmt-maven-plugin.version}</version>
        </plugin>

        <!-- ビルドルール -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-enforcer-plugin</artifactId>
          <version>${maven-enforcer-plugin.version}</version>
          <executions>
            <execution>
              <goals>
                <!-- Mavenビルドのルールが守られているかどうかをチェックします。 -->
                <goal>enforce</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <!-- https://maven.apache.org/enforcer/enforcer-rules/index.html -->
            <rules>
              <!--
                   This rule checks that there are no duplicate dependencies declared in the POM of the project.
                   Duplicate dependencies are dependencies which have the same group id, artifact id,
                   type and classifier.
              -->
              <banDuplicatePomDependencyVersions/>
              <!--
                   This rule checks the dependencies and fails if any of the matching excludes are found.
              -->
              <bannedDependencies>
                <searchTransitive>true</searchTransitive>
              </bannedDependencies>
              <!--
                   This rule requires that dependency version numbers converge.
                   If a project has two dependencies, A and B, both depending on the same artifact, C,
                   this rule will fail the build if A depends on a different version of C then
                   the version of C depended on by B.
              -->
              <dependencyConvergence/>
              <!--
                   This rule checks that the versions within the reactor are consistent
                   furthermore it will check that every module within the project contains a parent
                   and that the parent is part of the reactor build.
                   Furthermore it will be checked if dependencies are inter-module dependencies that
                   they using the same version as given by the reactor.
              -->
              <reactorModuleConvergence/>
              <!--
                   This rule enforces certain Maven versions.
              -->
              <requireMavenVersion>
                <version>${maven.min-version}</version>
              </requireMavenVersion>
              <!--
                   This rule can enforce that a declared property is set and optionally evaluate it against a regular expression.
              -->
              <requireProperty>
                <property>main.basedir</property>
              </requireProperty>
              <requireProperty>
                <property>project.name</property>
              </requireProperty>
              <requireProperty>
                <property>project.description</property>
              </requireProperty>
              <!--
                   This rule enforces that specific dependencies and/or plugins have the same version.
              -->
              <requireSameVersions>
                <plugins>
                  <plugin>org.apache.maven.plugins:maven-surefire-plugin</plugin>
                  <plugin>org.apache.maven.plugins:maven-failsafe-plugin</plugin>
                </plugins>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>com.fasterxml.jackson.core:jackson-core</dependency>
                  <!-- databindのパッチバージョンが異なってしまってエラーになるので、グループから外す -->
                  <!-- <dependency>com.fasterxml.jackson.core:jackson-databind</dependency> -->
                  <dependency>com.fasterxml.jackson.dataformat:*</dependency>
                  <dependency>com.fasterxml.jackson.datatype:*</dependency>
                  <dependency>com.fasterxml.jackson.jaxrs:*</dependency>
                  <dependency>com.fasterxml.jackson.jr:*</dependency>
                  <dependency>com.fasterxml.jackson.module:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>com.squareup.okhttp3:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>com.squareup.retrofit2:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>io.github.resilience4j:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>org.assertj:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>org.junit.jupiter:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>org.mapstruct:*</dependency>
                </dependencies>
              </requireSameVersions>
              <requireSameVersions>
                <dependencies>
                  <dependency>org.testcontainers:*</dependency>
                </dependencies>
              </requireSameVersions>
              <!--
                   This rule checks the dependencies and fails if any snapshots are found.
              -->
              <requireReleaseDeps>
                <onlyWhenRelease>true</onlyWhenRelease>
              </requireReleaseDeps>
            </rules>
            <fail>true</fail>
          </configuration>
        </plugin>

        <!-- 依存ライブラリ、プラグインのバージョン -->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>${versions-maven-plugin.version}</version>
          <configuration>
            <!-- 更新をpom.xmlに反映した時に、バックアップのpom.xmlを生成しないようにします。 -->
            <generateBackupPoms>false</generateBackupPoms>
            <!--
                 versions-maven-pluginで更新の確認などをする時に、betaやRCなどのバージョンを更新先の候補として表示しないように設定します。
                 ※ 絶対パスで指定しないと、設定ファイルを読み込めません。
            -->
            <rulesUri>file:///${main.absdir}/${build-extensions.config.path}/versions/versions-maven-plugin-rules.xml</rulesUri>
          </configuration>
        </plugin>

        <!-- Nexus -->
        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <version>${nexus-staging-maven-plugin.version}</version>
          <extensions>true</extensions>
          <configuration>
            <serverId>ossrh</serverId>
            <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
            <autoReleaseAfterClose>true</autoReleaseAfterClose>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <!--
         Aggregator or Parent の場合にも利用するプラグイン
           default binding に含まれないプラグインだけを設定しています。
           cf.) https://github.com/apache/maven/blob/master/maven-core/src/main/resources/META-INF/plexus/default-bindings.xml
    -->
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
      </plugin>
      <!--
          インストール
            Aggregator projectはinstallする必要がないので、skipできるようにしています。
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <configuration>
          <skip>${disable.deploy}</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>


  <profiles>
    <profile>
      <id>ci</id>
      <build>
        <plugins>
          <!-- javadoc.jar -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
          </plugin>
          <!-- sources.jar -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <!-- GPG -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
          </plugin>
          <!-- Nexus -->
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <configuration>
              <skipNexusStagingDeployMojo>${disable.deploy}</skipNexusStagingDeployMojo>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <distributionManagement>
        <snapshotRepository>
          <id>ossrh</id>
          <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
      </distributionManagement>
    </profile>
  </profiles>
</project>
